[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "dlc-manager"
version = "1.0.0"
description = "现代化的 DLC 下载管理工具"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "DLC Manager Team"},
]
maintainers = [
    {name = "DLC Manager Team"},
]
keywords = ["dlc", "manager", "download", "qt", "gui", "async", "aiohttp", "qasync"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Internet :: File Transfer Protocol (FTP)",
    "Topic :: System :: Archiving :: Packaging",
    "Environment :: X11 Applications :: Qt",
    "Environment :: MacOS X",
    "Environment :: Win32 (MS Windows)",
]
requires-python = ">=3.8"
dependencies = [
    "PySide6>=6.7.0",
    "aiohttp>=3.9.5",
    "qasync>=0.27.1",
    "aiofiles>=23.2.1",
    "Pillow>=9.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-qt>=4.2.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
build = [
    "pyinstaller>=5.0.0",
    "build>=0.10.0",
    "twine>=4.0.0",
]
docs = [
    "mkdocs>=1.4.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.20.0",
]

[project.scripts]
dlc-manager = "main:main"

[project.gui-scripts]
dlc-manager-gui = "main:main"

[project.urls]
Homepage = "https://github.com/your-username/dlc-manager"
Repository = "https://github.com/your-username/dlc-manager"
Documentation = "https://your-username.github.io/dlc-manager"
Issues = "https://github.com/your-username/dlc-manager/issues"
Changelog = "https://github.com/your-username/dlc-manager/blob/main/CHANGELOG.md"

[tool.setuptools]
packages = ["core", "ui", "utils", "dlc"]
package-dir = {"" = "."}

[tool.setuptools.package-data]
"*" = ["*.qss", "*.qrc", "*.md", "*.txt", "*.json"]
resources = ["*.qss", "*.qrc", "icons/*"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["core", "ui", "utils", "dlc"]
known_third_party = ["PySide6", "aiohttp", "qasync", "aiofiles", "PIL"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    ".eggs",
    "*.egg-info",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
exclude = [
    "build/",
    "dist/",
    ".venv/",
]

[[tool.mypy.overrides]]
module = [
    "qasync",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
pythonpath = ["."]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gui: marks tests as GUI tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["core", "ui", "utils", "dlc"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "build/*",
    "dist/*",
    "*.egg-info/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov" 